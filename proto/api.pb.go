// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type GPUMemoryResponse struct {
	Cap                  []int64  `protobuf:"varint,1,rep,packed,name=cap,proto3" json:"cap,omitempty"`
	Used                 []int64  `protobuf:"varint,2,rep,packed,name=used,proto3" json:"used,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GPUMemoryResponse) Reset()         { *m = GPUMemoryResponse{} }
func (m *GPUMemoryResponse) String() string { return proto.CompactTextString(m) }
func (*GPUMemoryResponse) ProtoMessage()    {}
func (*GPUMemoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *GPUMemoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GPUMemoryResponse.Unmarshal(m, b)
}
func (m *GPUMemoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GPUMemoryResponse.Marshal(b, m, deterministic)
}
func (m *GPUMemoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GPUMemoryResponse.Merge(m, src)
}
func (m *GPUMemoryResponse) XXX_Size() int {
	return xxx_messageInfo_GPUMemoryResponse.Size(m)
}
func (m *GPUMemoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GPUMemoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GPUMemoryResponse proto.InternalMessageInfo

func (m *GPUMemoryResponse) GetCap() []int64 {
	if m != nil {
		return m.Cap
	}
	return nil
}

func (m *GPUMemoryResponse) GetUsed() []int64 {
	if m != nil {
		return m.Used
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "proto.Request")
	proto.RegisterType((*GPUMemoryResponse)(nil), "proto.GPUMemoryResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x9c, 0x5c, 0xec, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x4a, 0x96, 0x5c, 0x82, 0xee, 0x01, 0xa1, 0xbe, 0xa9, 0xb9, 0xf9, 0x45,
	0x95, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x02, 0x5c, 0xcc, 0xc9, 0x89, 0x05,
	0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xcc, 0x41, 0x20, 0xa6, 0x90, 0x10, 0x17, 0x4b, 0x69, 0x71, 0x6a,
	0x8a, 0x04, 0x13, 0x58, 0x08, 0xcc, 0x36, 0x8a, 0xe5, 0xe2, 0x73, 0x0f, 0x08, 0xf5, 0xcc, 0x4b,
	0xcb, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe6, 0x92, 0x76, 0x4f, 0x2d, 0x81,
	0x9b, 0xe7, 0x9c, 0x58, 0x90, 0x98, 0x9c, 0x59, 0x52, 0xe9, 0x98, 0x97, 0x12, 0x5a, 0x9c, 0x9a,
	0x22, 0xc4, 0x07, 0x71, 0x85, 0x1e, 0xd4, 0x6e, 0x29, 0x09, 0x28, 0x1f, 0xc3, 0x01, 0x4a, 0x0c,
	0x06, 0x8c, 0x49, 0x6c, 0x60, 0x49, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x11, 0xe2,
	0x80, 0xbf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GPUInfoServiceClient is the client API for GPUInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GPUInfoServiceClient interface {
	GetGPUMemoryCapacityAndUsed(ctx context.Context, in *Request, opts ...grpc.CallOption) (GPUInfoService_GetGPUMemoryCapacityAndUsedClient, error)
}

type gPUInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewGPUInfoServiceClient(cc *grpc.ClientConn) GPUInfoServiceClient {
	return &gPUInfoServiceClient{cc}
}

func (c *gPUInfoServiceClient) GetGPUMemoryCapacityAndUsed(ctx context.Context, in *Request, opts ...grpc.CallOption) (GPUInfoService_GetGPUMemoryCapacityAndUsedClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GPUInfoService_serviceDesc.Streams[0],c.cc, "/proto.GPUInfoService/GetGPUMemoryCapacityAndUsed", opts...)
	if err != nil {
		return nil, err
	}
	x := &gPUInfoServiceGetGPUMemoryCapacityAndUsedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GPUInfoService_GetGPUMemoryCapacityAndUsedClient interface {
	Recv() (*GPUMemoryResponse, error)
	grpc.ClientStream
}

type gPUInfoServiceGetGPUMemoryCapacityAndUsedClient struct {
	grpc.ClientStream
}

func (x *gPUInfoServiceGetGPUMemoryCapacityAndUsedClient) Recv() (*GPUMemoryResponse, error) {
	m := new(GPUMemoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GPUInfoServiceServer is the server API for GPUInfoService service.
type GPUInfoServiceServer interface {
	GetGPUMemoryCapacityAndUsed(*Request, GPUInfoService_GetGPUMemoryCapacityAndUsedServer) error
}

func RegisterGPUInfoServiceServer(s *grpc.Server, srv GPUInfoServiceServer) {
	s.RegisterService(&_GPUInfoService_serviceDesc, srv)
}

func _GPUInfoService_GetGPUMemoryCapacityAndUsed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GPUInfoServiceServer).GetGPUMemoryCapacityAndUsed(m, &gPUInfoServiceGetGPUMemoryCapacityAndUsedServer{stream})
}

type GPUInfoService_GetGPUMemoryCapacityAndUsedServer interface {
	Send(*GPUMemoryResponse) error
	grpc.ServerStream
}

type gPUInfoServiceGetGPUMemoryCapacityAndUsedServer struct {
	grpc.ServerStream
}

func (x *gPUInfoServiceGetGPUMemoryCapacityAndUsedServer) Send(m *GPUMemoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GPUInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GPUInfoService",
	HandlerType: (*GPUInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGPUMemoryCapacityAndUsed",
			Handler:       _GPUInfoService_GetGPUMemoryCapacityAndUsed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
